'''NAME
rich_AT
VERSION
1.0
AUTHOR
Andres Rivera Ramirez
DESCRIPTION
Programa que encuentra subsecuencias conteniendo AT en una secuencia dada por un archivo y las imprime a la pantalla
CATEGORY
USAGE
    python src/rich_at [-h] -f La ruta del archivo de entrada

ARGUMENTS
  -h, --help            show this help message and exit
  -f Ruta del archivo de entrada
                        Archivo de secuencias de DNA
  -s
                        EL tama침o minimo de la subsecuencia
SEE ALSO
'''

import argparse
import re

# Se crean los argumentos para el archivo de entrada y el tama침o  minimo
parser = argparse.ArgumentParser(
    description=" Este programa busca una region rica en AT como una subsecuencia  de una secuencia  dada")

parser.add_argument("-f",
                    metavar="El path del archivo de entrada",
                    help="La ruta del archivo de secuencia de DNA",
                    required=True)
parser.add_argument("-s",
                    metavar="Tama침o de la region minima rica en AT",
                    help="El numero de bases minimo que se considerara una region rica en AT",
                    required=True)

args = parser.parse_args()

# Se intenta abrir el archivo dada su ruta, de no ser posible se notifica
try:
    archivo = open(args.f)
    secuencia = archivo.read().rstrip('\n').upper()
    archivo.close()
except IOError as ex:
    print("No es posible encontrar el archivo: \n" + ex.strerror)

num = args.s


# Funcion que encuentra caracteres diferentes de ATCG y notifica al usuario dando su posicion
def encontrarNs(secuencia):
    '''
    +++ Objectivo +++
    -- Encontrar todos los caracteres no permitidos dentro de una secuencia de ADN
    +++ Parametros +++
    -- ::param:: secuencia (String) -> Secuencia de nucleotidos que sera analizada
    +++ Return +++
    -- bandera (boolean) -> Variable de dos estados que indica si se encuentra o no
                            un caracter invalido en la secuencia
    '''
    bandera = True
    errores = re.finditer("[^ATGC]+", secuencia)
    num_errores = len([*re.finditer("[^ATGC]+", secuencia)])
    if num_errores > 0:
        bandera = False
        for error in errores:
            mensaje = "Se encontro el caracter invalido: {} en la posici칩n {}".format(error.group(),error.span())
            print(mensaje)
    return(bandera)

# Funcion que encuentra las subsecuencias que contienen AT y las imprime con sus posiciones


def encontrar_region(secuencia, n):
    '''
    +++ Objectivo +++
    -- Encontrar las regiones ricas en AT de acuerdo con la cantidad especificada
    +++ Parametros +++
    -- ::param:: secuencia (String) -> Secuencia de ADN que sera analizada
    -- ::param:: n (int) -> Numero de ocurrencias que se busca
    +++ Return +++
    -- No regresa un valor, es un procedimiento
    '''
    regiones = re.finditer(r"[A|T]{" + num + ",}", secuencia)
    for region in regiones:
        type(region)
        subsecuencia = region.group()
        span = region.span()
        print(subsecuencia, "\n", span)


# Se llama a ambas funciones
check = encontrarNs(secuencia)
if(check):
    resultado = encontrar_region(secuencia, args.s)
